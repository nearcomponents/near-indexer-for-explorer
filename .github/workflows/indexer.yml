name: "Indexer"
permissions:
  id-token: write
  contents: read
on:
  push:
    branches:
      - master
  pull_request:
jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          role-to-assume: arn:aws:iam::165372248390:role/OIDC-tf-network-Role-1R4YU7W42P3NC
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-skip-session-tagging: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: indexer-node
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        continue-on-error: true
  deployDeployment:
    needs: build
    name: Deploy Development
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition indexer-development-node \
          --query taskDefinition > task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          ask-definition: task-definition.json
          container-name: application
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: indexer-development-cluster
          cluster: indexer-development-node
          wait-for-service-stability: true
  stagingDeployment:
    name: Deploy Staging
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: indexer-production-node
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: indexer-development-node
          cluster: indexer-development-cluster
          wait-for-service-stability: true
  productionDeployment:
    name: Production Staging
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition service \
          --query taskDefinition > task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          ask-definition: task-definition.json
          container-name: application
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
